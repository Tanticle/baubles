plugins {
    id 'java-library'
    id 'idea'
    id 'net.neoforged.moddev' version '0.1.91'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    withSourcesJar()
}

group = mod_group_id
base { archivesName = mod_id }
version = mod_version

sourceSets { main; api; example }

neoForge {
    version = neo_version

    addModdingDependenciesTo sourceSets.api
    addModdingDependenciesTo sourceSets.example

    runs {
        configureEach {
            systemProperty 'terminal.ansi', 'true'
            systemProperty 'forge.logging.console.level', 'debug'
        }
        ClientThinArm {
            client()
            programArguments =  ['--username', 'Dev']
            sourceSet = sourceSets.example
        }
        ClientThickArm {
            client()
            programArguments =  ['--username', 'Dev2']
            sourceSet = sourceSets.example
        }
        Server {
            server()
            sourceSet = sourceSets.example
        }
    }

    mods {
        baubles {
            sourceSet sourceSets.main
            sourceSet sourceSets.api
        }
        baubles_example {
            sourceSet sourceSets.example
        }
    }
}

dependencies {
    implementation sourceSets.api.output
    runtimeOnly sourceSets.api.output

    exampleImplementation sourceSets.api.output
    exampleImplementation sourceSets.main.output
    exampleRuntimeOnly sourceSets.main.output
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version: neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description, mod_credits: credits
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(Jar).configureEach {
    from sourceSets.api.output

    from(project.rootDir) {
        include 'LICENSE'
    }

    manifest {
        attributes([
                "Specification-Title": mod_name,
                "Specification-Vendor": mod_authors,
                "Specification-Version": mod_version,
                "Implementation-Title": mod_name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor": mod_version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}